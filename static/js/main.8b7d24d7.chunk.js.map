{"version":3,"sources":["utils/filterDates.js","utils/filterDays.js","services/getForecast.js","hooks/useFetchForecast.js","components/Logo/Logo.jsx","components/Logo/index.jsx","components/DegreeSwitch/StyledSwitch.jsx","components/DegreeSwitch/StyledSpan.jsx","components/DegreeSwitch/index.jsx","components/StyledInput/Input.jsx","components/StyledInput/index.jsx","components/DateDisplay/StyledSection.jsx","components/DateDisplay/StyledDate.jsx","utils/showDate.js","components/DateDisplay/index.jsx","components/CityName/City.jsx","components/CityName/index.jsx","utils/convertCtoF.js","utils/displayTemperature.js","components/Forecast/OutterCointainer.jsx","components/Forecast/InnerContainer.jsx","components/Forecast/StyledImage.jsx","assets/cloud.svg","assets/crescent.svg","assets/humidity.svg","assets/sun.svg","components/Forecast/index.jsx","utils/calculateAvgTempAndClouds.js","components/DaysSelection/StyledSection.jsx","components/DaysSelection/StyledDay.jsx","components/DaysSelection/StyledImage.jsx","components/DaysSelection/index.jsx","App.js","index.js"],"names":["filterDates","forecast","tempDatesArray","i","list","length","includes","dt_txt","split","push","filterDays","dates","tempDaysArray","filter","item","getForecast","cityName","fetch","process","then","response","json","data","dataFetchReducer","state","action","type","isLoading","isError","payload","Error","useFetchForecast","cityNameAndUnits","useState","cityAndUnits","setCityAndUnits","useReducer","dispatch","useEffect","isCached","sessionStorage","getItem","JSON","parse","cod","setItem","stringify","catch","fetchForecast","Logo","styled","h1","StyledLogo","StyledSwitch","div","StyledSpan","span","props","isActive","css","DegreeSwitch","setOutterUnits","units","setUnits","onClick","handleClick","Input","input","StyledInput","doFetch","debouncedSetCityName","useCallback","debounce","value","placeholder","onChange","e","event","target","handleChange","StyledSection","section","StyledDate","p","showDate","date","Date","Intl","DateTimeFormat","format","join","DateDisplay","City","CityName","convertCtoF","temp","displayTemperature","timeOfTheDay","averageTemp","main","Math","trunc","OutterContainer","InnerContainer","StyledImage","img","Forecast","day","morningTemp","find","dayTemp","nightTemp","humidity","map","reduce","prev","curr","src","Cloud","Sun","Crescent","Humidity","defaultProps","calculateAvgTempAndClouds","days","tempAvg","array","cloudsAvg","clouds","all","averageClouds","StyledDay","DaysSelection","averageTempAndClouds","setDay","selectedDay","setSelectedDay","slice","index","App","city","name","message","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8b7d24d7.chunk.js","sourcesContent":["const filterDates = (forecast) => {\n  const tempDatesArray = [];\n  for (let i = 0; i < forecast.list.length; i++) {\n    if (tempDatesArray.includes(forecast.list[i].dt_txt.split(\" \")[0]))\n      continue;\n    tempDatesArray.push(forecast.list[i].dt_txt.split(\" \")[0]);\n  }\n\n  return tempDatesArray;\n};\n\nexport default filterDates;\n","const filterDays = (forecast, dates) => {\n  const tempDaysArray = [];\n  for (let i = 0; i < 5; i++) {\n    tempDaysArray.push(\n      forecast.list.filter((item) => item.dt_txt.split(\" \")[0] === dates[i])\n    );\n  }\n\n  return tempDaysArray;\n};\n\nexport default filterDays;\n","const getForecast = (cityName) => {\n  return fetch(\n    `https://api.openweathermap.org/data/2.5/forecast?q=${cityName}&units=metric&appid=${process.env.REACT_APP_API_KEY}`\n  )\n    .then((response) => response.json())\n    .then((data) => data);\n};\n\nexport default getForecast;\n","import { useEffect, useState, useReducer } from \"react\";\nimport getForecast from \"../services/getForecast\";\n\nconst dataFetchReducer = (state, action) => {\n  switch (action.type) {\n    case \"FETCH_INIT\":\n      return { ...state, isLoading: true, isError: false };\n    case \"FETCH_SUCCESS\":\n      return {\n        ...state,\n        isLoading: false,\n        isError: false,\n        forecast: action.payload,\n      };\n    case \"NOT_FOUND\":\n      return {\n        ...state,\n        isLoading: false,\n        isError: true,\n        forecast: action.payload,\n      };\n    case \"CACHED\":\n      return {\n        ...state,\n        isLoading: false,\n        isError: false,\n        forecast: action.payload,\n      };\n    case \"FETCH_FAILURE\":\n      return { ...state, isLoading: false, isError: true };\n    default:\n      throw new Error();\n  }\n};\n\nconst useFetchForecast = (cityNameAndUnits) => {\n  const [cityAndUnits, setCityAndUnits] = useState(cityNameAndUnits);\n\n  const [state, dispatch] = useReducer(dataFetchReducer, {\n    isLoading: false,\n    isError: false,\n    forecast: {},\n  });\n\n  useEffect(() => {\n    const fetchForecast = () => {\n      dispatch({ type: \"FETCH_INIT\" });\n\n      const isCached = sessionStorage.getItem(cityAndUnits);\n\n      if (isCached) {\n        return dispatch({ type: \"CACHED\", payload: JSON.parse(isCached) });\n      }\n\n      getForecast(cityAndUnits)\n        .then((data) => {\n          if (data.cod === \"404\") {\n            sessionStorage.setItem(cityAndUnits, JSON.stringify(data));\n            return dispatch({ type: \"NOT_FOUND\", payload: data });\n          }\n          sessionStorage.setItem(cityAndUnits, JSON.stringify(data));\n          return dispatch({ type: \"FETCH_SUCCESS\", payload: data });\n        })\n        .catch(() => dispatch({ type: \"FETCH_FAILURE\" }));\n    };\n\n    fetchForecast();\n  }, [cityAndUnits]);\n\n  return [state, setCityAndUnits];\n};\n\nexport default useFetchForecast;\n","import styled from \"styled-components\";\n\nconst Logo = styled.h1`\n  font-family: \"Pacifico\", cursive;\n  font-style: normal;\n  font-weight: normal;\n  font-size: 50px;\n  line-height: 63px;\n  text-align: center;\n  letter-spacing: 0.07px;\n  margin: 1rem auto 0 auto;\n\n  color: #dfdfe1;\n\n  text-shadow: 0px 4px 4px rgba(0, 0, 0, 0.25);\n`;\n\nexport default Logo;\n","import Logo from \"./Logo\";\n\nconst StyledLogo = () => <Logo>Five Days</Logo>;\n\nexport default StyledLogo;\n","import styled from \"styled-components\";\n\nconst StyledSwitch = styled.div`\n  width: 67px;\n  height: 33px;\n  margin: 0 auto 0 auto;\n  transform: translate(7rem, 4.44rem);\n\n  background: #32333e;\n  border-radius: 16px;\n\n  & * {\n    cursor: pointer;\n  }\n\n  & label {\n    font-family: \"Palanquin\";\n    font-style: normal;\n    font-weight: normal;\n    font-size: 20px;\n    line-height: 30px;\n    padding-left: 0.5rem;\n    color: #9b9ead;\n    text-align: center;\n    letter-spacing: 0.0583333px;\n  }\n`;\n\nexport default StyledSwitch;\n","import styled, { css } from \"styled-components\";\n\nconst StyledSpan = styled.span`\n  ${(props) =>\n    props.isActive &&\n    css`\n      color: white;\n    `}\n`;\n\nexport default StyledSpan;\n","import { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport StyledSwitch from \"./StyledSwitch\";\nimport StyledSpan from \"./StyledSpan\";\n\nconst DegreeSwitch = ({ setOutterUnits }) => {\n  const [units, setUnits] = useState(\"metric\");\n\n  const handleClick = () => {\n    if (units === \"metric\") {\n      setUnits(\"imperial\");\n      setOutterUnits(\"imperial\");\n      return;\n    }\n\n    setUnits(\"metric\");\n    setOutterUnits(\"metric\");\n  };\n\n  return (\n    <StyledSwitch onClick={() => handleClick()}>\n      <label>\n        <StyledSpan isActive={units === \"metric\"}>C°</StyledSpan> /{\" \"}\n        <StyledSpan isActive={units === \"imperial\"}>F°</StyledSpan>\n      </label>\n    </StyledSwitch>\n  );\n};\n\nDegreeSwitch.propTypes = {\n  setOutterUnits: PropTypes.func.isRequired,\n};\n\nexport default DegreeSwitch;\n","import styled from \"styled-components\";\n\nconst Input = styled.input`\n  display: block;\n  width: 317px;\n  height: 47px;\n  margin: 2rem auto 0;\n  z-index: 2;\n  background: none;\n  color: white;\n  padding: 10px 6rem 10px 10px;\n\n  border: 1px solid #83869c;\n  box-sizing: border-box;\n  border-radius: 16px;\n`;\n\nexport default Input;\n","import { useCallback } from \"react\";\nimport debounce from \"lodash.debounce\";\nimport ProptTypes from \"prop-types\";\n\nimport Input from \"./Input\";\n\nconst StyledInput = ({ doFetch }) => {\n  // eslint-disable-next-line\n  const debouncedSetCityName = useCallback(\n    debounce((value) => doFetch(value), 300),\n    []\n  );\n\n  const handleChange = (event) => {\n    const { value } = event.target;\n\n    debouncedSetCityName(value);\n  };\n\n  return (\n    <Input\n      placeholder='Enter city name'\n      onChange={(e) => handleChange(e)}></Input>\n  );\n};\n\nStyledInput.propTypes = {\n  doFetch: ProptTypes.func.isRequired,\n};\n\nexport default StyledInput;\n","import styled from \"styled-components\";\n\nconst StyledSection = styled.section`\n  width: 100%;\n  height: 39px;\n\n  margin: 2rem 0;\n\n  background: #464858;\n  box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.25);\n`;\n\nexport default StyledSection;\n","import styled from \"styled-components\";\n\nconst StyledDate = styled.p`\n  font-family: \"Palanquin\";\n  font-style: normal;\n  font-weight: normal;\n  font-size: 18px;\n  text-align: center;\n  letter-spacing: 0.07px;\n\n  color: #b1b3c5;\n`;\n\nexport default StyledDate;\n","const showDate = () => {\n  const date = new Date();\n  return new Intl.DateTimeFormat(\"en-GB\").format(date).split(\"/\").join(\".\");\n};\n\nexport default showDate;\n","import StyledSection from \"./StyledSection\";\nimport StyledDate from \"./StyledDate\";\n\nimport showDate from \"../../utils/showDate\";\n\nconst DateDisplay = () => (\n  <StyledSection>\n    <StyledDate>Today is: {showDate()}</StyledDate>\n  </StyledSection>\n);\n\nexport default DateDisplay;\n","import styled from \"styled-components\";\n\nconst City = styled.h1`\n  font-family: \"Pacifico\", cursive;\n  font-style: normal;\n  font-weight: normal;\n  font-size: 42px;\n  text-align: center;\n  letter-spacing: 0.07px;\n\n  color: #dfdfe1;\n\n  text-shadow: 0px 4px 4px rgba(0, 0, 0, 0.25);\n`;\n\nexport default City;\n","import PropTypes from \"prop-types\";\n\nimport City from \"./City\";\n\nconst CityName = ({ cityName }) => <City>{cityName}</City>;\n\nCityName.propTypes = {\n  cityName: PropTypes.string.isRequired,\n};\n\nexport default CityName;\n","const convertCtoF = (temp) => (temp * 9) / 5 + 32;\n\nexport default convertCtoF;\n","import convertCtoF from \"./convertCtoF\";\n\nconst displayTemperature = (timeOfTheDay = null, units, averageTemp = null) => {\n  if (timeOfTheDay) {\n    return timeOfTheDay?.main.temp && units === \"metric\"\n      ? `${Math.trunc(timeOfTheDay?.main.temp)} C°`\n      : `${Math.trunc(convertCtoF(timeOfTheDay?.main.temp))} F°`;\n  }\n\n  return units === \"metric\"\n    ? `${averageTemp} C°`\n    : `${Math.trunc(convertCtoF(averageTemp))} F°`;\n};\n\nexport default displayTemperature;\n","import styled from \"styled-components\";\n\nconst OutterContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  width: fit-content;\n  padding: 0.4rem;\n  gap: 8rem;\n  margin: 4rem auto;\n\n  background: #32333e;\n  box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.25);\n  border-radius: 16px;\n\n  @media (max-width: 600px) {\n    gap: 1rem;\n    margin: 4rem 1rem;\n  }\n`;\n\nexport default OutterContainer;\n","import styled from \"styled-components\";\n\nconst InnerContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  & span {\n    font-family: \"Palanquin\";\n    font-style: normal;\n    font-weight: normal;\n    font-size: 18px;\n    margin: 0.5rem;\n\n    color: #9b9ead;\n\n    & img {\n      padding-top: 1rem;\n    }\n\n    & span {\n      color: #ffff;\n    }\n  }\n\n  @media (max-width: 600px) {\n    & span {\n      font-size: 14px;\n    }\n  }\n`;\n\nexport default InnerContainer;\n","import styled from \"styled-components\";\n\nconst StyledImage = styled.img`\n  width: 40px;\n  height: 40px;\n`;\n\nexport default StyledImage;\n","export default __webpack_public_path__ + \"static/media/cloud.736c978f.svg\";","export default __webpack_public_path__ + \"static/media/crescent.2d21af09.svg\";","export default __webpack_public_path__ + \"static/media/humidity.4d1cec5c.svg\";","export default __webpack_public_path__ + \"static/media/sun.a3cc2609.svg\";","import PropTypes from \"prop-types\";\n\nimport displayTemperature from \"../../utils/displayTemperature\";\n\nimport OutterContainer from \"./OutterCointainer\";\nimport InnerContainer from \"./InnerContainer\";\nimport StyledImage from \"./StyledImage\";\n\nimport Cloud from \"../../assets/cloud.svg\";\nimport Crescent from \"../../assets/crescent.svg\";\nimport Humidity from \"../../assets/humidity.svg\";\nimport Sun from \"../../assets/sun.svg\";\n\nconst Forecast = ({ day, units }) => {\n  if (!day) return <></>;\n\n  const morningTemp = day.find(\n    (item) =>\n      item.dt_txt.split(\" \")[1] === \"06:00:00\" ||\n      item.dt_txt.split(\" \")[1] === \"09:00:00\"\n  );\n\n  const dayTemp = day.find(\n    (item) =>\n      item.dt_txt.split(\" \")[1] === \"12:00:00\" ||\n      item.dt_txt.split(\" \")[1] === \"15:00:00\"\n  );\n\n  const nightTemp = day.find(\n    (item) => item.dt_txt.split(\" \")[1] === \"21:00:00\"\n  );\n\n  const humidity =\n    day.map((item) => item.main.humidity).reduce((prev, curr) => prev + curr) /\n    day.length;\n\n  return (\n    <OutterContainer>\n      <InnerContainer>\n        <span>\n          <StyledImage src={Cloud} /> Morning Temperature:{\" \"}\n          <span>\n            {displayTemperature(morningTemp, units).includes(\"null\")\n              ? \"Data Not Available\"\n              : displayTemperature(morningTemp, units)}\n          </span>{\" \"}\n        </span>\n        <span>\n          <StyledImage src={Sun} /> Day Temperature:{\" \"}\n          <span>\n            {displayTemperature(dayTemp, units).includes(\"null\")\n              ? \"Data Not Available\"\n              : displayTemperature(dayTemp, units)}\n          </span>{\" \"}\n        </span>\n      </InnerContainer>\n      <InnerContainer>\n        <span>\n          <StyledImage src={Crescent} /> Night Temperature:{\" \"}\n          <span>\n            {\" \"}\n            {displayTemperature(nightTemp, units).includes(\"null\")\n              ? \"Data Not Available\"\n              : displayTemperature(nightTemp, units)}\n          </span>{\" \"}\n        </span>\n        <span>\n          <StyledImage src={Humidity} /> Humidity:{\" \"}\n          <span>{Math.trunc(humidity)}%</span>\n        </span>\n      </InnerContainer>\n    </OutterContainer>\n  );\n};\n\nForecast.defaultProps = {\n  day: null,\n  units: null,\n};\n\nForecast.propTypes = {\n  day: PropTypes.array,\n  units: PropTypes.string,\n};\n\nexport default Forecast;\n","const calculateAvgTempAndClouds = (days) => {\n  return days.map((item) => {\n    const tempAvg = item\n      .map((array) => array.main.temp)\n      .reduce((prev, curr) => prev + curr);\n    const cloudsAvg = item\n      .map((array) => array.clouds.all)\n      .reduce((prev, curr) => prev + curr);\n    const tempObject = {\n      averageTemp: Math.trunc(tempAvg / item.length),\n      averageClouds: Math.trunc(cloudsAvg / item.length),\n    };\n    return tempObject;\n  });\n};\n\nexport default calculateAvgTempAndClouds;\n","import styled from \"styled-components\";\n\nconst StyledSection = styled.section`\n  display: flex;\n  width: fit-content;\n  flex-direction: row;\n  justify-content: center;\n  gap: 2rem;\n  margin: 4rem auto;\n  padding: 1rem;\n\n  background: #32333e;\n  box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.25);\n  border-radius: 16px;\n\n  @media (max-width: 600px) {\n    gap: 1rem;\n    margin: 4rem 0.5rem;\n  }\n\n  @media (max-width: 380px) {\n    gap: 0.5rem;\n    margin: 4rem 0.5rem;\n  }\n`;\n\nexport default StyledSection;\n","import styled, { css } from \"styled-components\";\n\nconst StyledDay = styled.div`\n  width: 100px;\n  height: 200px;\n\n  background: rgba(0, 0, 0, 0.1);\n  border-radius: 30px;\n\n  ${(props) =>\n    props.isActive &&\n    css`\n      background: rgba(255, 255, 255, 0.2);\n      border: 1px solid #ffffff;\n      box-sizing: border-box;\n      border-radius: 30px;\n    `}\n\n  & p {\n    font-family: \"Palanquin\";\n    font-style: normal;\n    font-weight: normal;\n    font-size: 16px;\n\n    text-align: center;\n\n    color: #ffffff;\n    opacity: 0.5;\n\n    margin-top: 1rem;\n  }\n\n  & h4 {\n    font-family: \"Palanquin\";\n    font-style: normal;\n    font-weight: 600;\n    font-size: 28px;\n    line-height: 0;\n    text-align: center;\n\n    color: #ffffff;\n  }\n\n  @media (max-width: 600px) {\n    width: 60px;\n    height: 140px;\n\n    & p {\n      font-size: 12px;\n    }\n\n    & h4 {\n      font-size: 16px;\n    }\n  }\n\n  @media (max-width: 360px) {\n    width: 50px;\n    height: 140px;\n\n    & p {\n      font-size: 10px;\n    }\n\n    & h4 {\n      font-size: 14px;\n    }\n  }\n`;\n\nexport default StyledDay;\n","import styled from \"styled-components\";\n\nconst StyledImage = styled.img`\n  width: 60px;\n  height: 60px;\n  margin: 1rem 0.8rem;\n\n  @media (max-width: 600px) {\n    width: 40px;\n    height: 40px;\n  }\n\n  @media (max-width: 360px) {\n    width: 30px;\n    height: 30px;\n  }\n`;\n\nexport default StyledImage;\n","import { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport calculateAvgTempAndClouds from \"../../utils/calculateAvgTempAndClouds\";\nimport displayTemperature from \"../../utils/displayTemperature\";\n\nimport StyledSection from \"./StyledSection\";\nimport StyledDay from \"./StyledDay\";\nimport StyledImage from \"./StyledImage\";\n\nimport Cloud from \"../../assets/cloud.svg\";\nimport Humidity from \"../../assets/humidity.svg\";\nimport Sun from \"../../assets/sun.svg\";\n\nconst DaysSelection = ({ dates, days, setDay, units }) => {\n  const [selectedDay, setSelectedDay] = useState(0);\n\n  if (!dates) return <></>;\n\n  let averageTempAndClouds;\n\n  if (days) {\n    averageTempAndClouds = calculateAvgTempAndClouds(days);\n  }\n\n  const weatherIcon = (averageClouds) => {\n    if (averageClouds < 50) {\n      return Sun;\n    }\n\n    if (averageClouds > 80) {\n      return Humidity;\n    }\n\n    return Cloud;\n  };\n\n  const handleSelect = (day) => {\n    setSelectedDay(day);\n    setDay(day);\n  };\n\n  return (\n    <StyledSection>\n      {dates.slice(0, 5).map((item, index) => {\n        return (\n          <StyledDay\n            key={item}\n            onClick={() => handleSelect(index)}\n            isActive={selectedDay === index}>\n            <p>{item}</p>\n            <StyledImage\n              src={weatherIcon(averageTempAndClouds[index].averageClouds)}\n            />\n            <h4>\n              {displayTemperature(\n                null,\n                units,\n                averageTempAndClouds[index].averageTemp\n              )}\n            </h4>\n          </StyledDay>\n        );\n      })}\n    </StyledSection>\n  );\n};\n\nDaysSelection.defaultProps = {\n  dates: null,\n  days: null,\n  setDay: null,\n  units: null,\n};\n\nDaysSelection.propTypes = {\n  dates: PropTypes.array,\n  days: PropTypes.array,\n  setDay: PropTypes.func,\n  units: PropTypes.string,\n};\n\nexport default DaysSelection;\n","import { useState } from \"react\";\n\nimport filterDates from \"./utils/filterDates\";\nimport filterDays from \"./utils/filterDays\";\n\nimport useFetchForecast from \"./hooks/useFetchForecast\";\n\nimport StyledLogo from \"./components/Logo\";\nimport DegreeSwitch from \"./components/DegreeSwitch\";\nimport StyledInput from \"./components/StyledInput\";\nimport DateDisplay from \"./components/DateDisplay\";\nimport CityName from \"./components/CityName\";\nimport Forecast from \"./components/Forecast\";\nimport DaysSelection from \"./components/DaysSelection\";\n\nimport \"./styles/app.css\";\n\nconst App = () => {\n  const [day, setDay] = useState(0);\n  const [units, setUnits] = useState(\"metric\");\n\n  const [{ forecast, isLoading }, doFetch] = useFetchForecast(\"\");\n\n  let dates = [];\n  let days = [];\n\n  if (forecast?.list) {\n    dates = filterDates(forecast);\n    days = filterDays(forecast, dates);\n  }\n\n  return (\n    <main>\n      <StyledLogo />\n      <DegreeSwitch setOutterUnits={setUnits} />\n      <StyledInput doFetch={doFetch} />\n      <DateDisplay />\n      <CityName\n        cityName={\n          isLoading ? \"Loading\" : forecast?.city?.name || forecast?.message\n        }\n      />\n      <Forecast day={days[day]} units={units} />\n      <DaysSelection dates={dates} days={days} setDay={setDay} units={units} />\n    </main>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}