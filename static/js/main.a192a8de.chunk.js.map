{"version":3,"sources":["utils/filterDates.js","utils/filterDays.js","components/Logo/Logo.jsx","components/Logo/index.jsx","components/StyledInput/Input.jsx","components/StyledInput/index.jsx","components/DateDisplay/StyledSection.jsx","components/DateDisplay/StyledDate.jsx","utils/showDate.js","components/DateDisplay/index.jsx","components/CityName/City.jsx","components/CityName/index.jsx","utils/displayTemperature.js","components/Forecast/OutterCointainer.jsx","components/Forecast/InnerContainer.jsx","components/Forecast/StyledImage.jsx","assets/cloud.svg","assets/crescent.svg","assets/humidity.svg","assets/sun.svg","components/Forecast/index.jsx","utils/calculateAvgTempAndClouds.js","components/DaysSelection/StyledSection.jsx","components/DaysSelection/StyledDay.jsx","components/DaysSelection/StyledImage.jsx","components/DaysSelection/index.jsx","services/getForecast.js","App.js","index.js"],"names":["filterDates","forecast","tempDatesArray","i","list","length","includes","dt_txt","split","push","filterDays","dates","tempDaysArray","filter","item","Logo","styled","h1","StyledLogo","Input","input","StyledInput","setCityName","placeholder","onChange","e","target","value","StyledSection","section","StyledDate","p","showDate","date","Date","Intl","DateTimeFormat","format","join","DateDisplay","City","CityName","cityName","displayTemperature","timeOfTheDay","main","temp","Math","trunc","OutterContainer","div","InnerContainer","StyledImage","img","Forecast","day","morningTemp","find","dayTemp","nightTemp","humidity","map","reduce","prev","curr","src","Cloud","Sun","Crescent","Humidity","calculateAvgTempAndClouds","days","tempAvg","array","cloudsAvg","clouds","all","averageTemp","averageClouds","StyledDay","props","isActive","css","DaysSelection","averageTempAndClouds","setDay","useState","selectedDay","setSelectedDay","slice","index","onClick","getForecast","fetch","process","then","response","json","data","App","setForecast","useEffect","fetchForecast","a","fetchedForecast","city","name","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a192a8de.chunk.js","sourcesContent":["const filterDates = (forecast) => {\n  const tempDatesArray = [];\n  for (let i = 0; i < forecast.list.length; i++) {\n    if (tempDatesArray.includes(forecast.list[i].dt_txt.split(\" \")[0]))\n      continue;\n    tempDatesArray.push(forecast.list[i].dt_txt.split(\" \")[0]);\n  }\n\n  return tempDatesArray;\n};\n\nexport default filterDates;\n","const filterDays = (forecast, dates) => {\n  const tempDaysArray = [];\n  for (let i = 0; i < 5; i++) {\n    tempDaysArray.push(\n      forecast.list.filter((item) => item.dt_txt.split(\" \")[0] === dates[i])\n    );\n  }\n\n  return tempDaysArray;\n};\n\nexport default filterDays;\n","import styled from \"styled-components\";\n\nconst Logo = styled.h1`\n  font-family: \"Pacifico\", cursive;\n  font-style: normal;\n  font-weight: normal;\n  font-size: 36px;\n  line-height: 63px;\n  text-align: center;\n  letter-spacing: 0.07px;\n  margin: 1rem 0;\n\n  color: #dfdfe1;\n`;\n\nexport default Logo;\n","import Logo from \"./Logo\";\n\nconst StyledLogo = () => <Logo>Five Days</Logo>;\n\nexport default StyledLogo;\n","import styled from \"styled-components\";\n\nconst Input = styled.input`\n  display: block;\n  width: 317px;\n  height: 47px;\n  margin: 2rem auto 0;\n  z-index: 2;\n  background: none;\n  color: white;\n  padding: 10px;\n\n  border: 1px solid #83869c;\n  box-sizing: border-box;\n  border-radius: 16px;\n`;\n\nexport default Input;\n","import Input from \"./Input\";\n\nconst StyledInput = ({ setCityName }) => (\n  <Input\n    placeholder='Enter city name'\n    onChange={(e) => setCityName(e.target.value)}></Input>\n);\n\nexport default StyledInput;\n","import styled from \"styled-components\";\n\nconst StyledSection = styled.section`\n  width: 100%;\n  height: 39px;\n\n  margin: 2rem 0;\n\n  background: #464858;\n`;\n\nexport default StyledSection;\n","import styled from \"styled-components\";\n\nconst StyledDate = styled.p`\n  font-family: \"Palanquin\";\n  font-style: normal;\n  font-weight: normal;\n  font-size: 18px;\n  text-align: center;\n  letter-spacing: 0.07px;\n\n  color: #b1b3c5;\n`;\n\nexport default StyledDate;\n","const showDate = () => {\n  const date = new Date();\n  return new Intl.DateTimeFormat(\"en-GB\").format(date).split(\"/\").join(\".\");\n};\n\nexport default showDate;\n","import StyledSection from \"./StyledSection\";\nimport StyledDate from \"./StyledDate\";\n\nimport showDate from \"../../utils/showDate\";\n\nconst DateDisplay = () => (\n  <StyledSection>\n    <StyledDate>Today is: {showDate()}</StyledDate>\n  </StyledSection>\n);\n\nexport default DateDisplay;\n","import styled from \"styled-components\";\n\nconst City = styled.h1`\n  font-family: \"Pacifico\", cursive;\n  font-style: normal;\n  font-weight: normal;\n  font-size: 36px;\n  text-align: center;\n  letter-spacing: 0.07px;\n\n  color: #dfdfe1;\n`;\n\nexport default City;\n","import City from \"./City\";\n\nconst CityName = ({ cityName }) => <City>{cityName}</City>;\n\nexport default CityName;\n","const displayTemperature = (timeOfTheDay) =>\n  timeOfTheDay?.main.temp\n    ? `${Math.trunc(timeOfTheDay?.main.temp)}Â°`\n    : \"Data Not Available\";\n\nexport default displayTemperature;\n","import styled from \"styled-components\";\n\nconst OutterContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  gap: 8rem;\n  margin: 4rem 2rem;\n\n  @media (max-width: 600px) {\n    gap: 1rem;\n  }\n`;\n\nexport default OutterContainer;\n","import styled from \"styled-components\";\n\nconst InnerContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  & span {\n    font-family: \"Palanquin\";\n    font-style: normal;\n    font-weight: normal;\n    font-size: 18px;\n    margin: 0.5rem;\n\n    color: #9b9ead;\n\n    & img {\n      padding-top: 1rem;\n    }\n\n    & span {\n      color: #ffff;\n    }\n  }\n\n  @media (max-width: 600px) {\n    & span {\n      font-size: 14px;\n    }\n  }\n`;\n\nexport default InnerContainer;\n","import styled from \"styled-components\";\n\nconst StyledImage = styled.img`\n  width: 40px;\n  height: 40px;\n`;\n\nexport default StyledImage;\n","export default __webpack_public_path__ + \"static/media/cloud.736c978f.svg\";","export default __webpack_public_path__ + \"static/media/crescent.2d21af09.svg\";","export default __webpack_public_path__ + \"static/media/humidity.4d1cec5c.svg\";","export default __webpack_public_path__ + \"static/media/sun.a3cc2609.svg\";","import displayTemperature from \"../../utils/displayTemperature\";\n\nimport OutterContainer from \"./OutterCointainer\";\nimport InnerContainer from \"./InnerContainer\";\nimport StyledImage from \"./StyledImage\";\n\nimport Cloud from \"../../assets/cloud.svg\";\nimport Crescent from \"../../assets/crescent.svg\";\nimport Humidity from \"../../assets/humidity.svg\";\nimport Sun from \"../../assets/sun.svg\";\n\nconst Forecast = ({ day }) => {\n  if (!day) return <></>;\n\n  const morningTemp = day.find(\n    (item) =>\n      item.dt_txt.split(\" \")[1] === \"06:00:00\" ||\n      item.dt_txt.split(\" \")[1] === \"09:00:00\"\n  );\n\n  const dayTemp = day.find(\n    (item) =>\n      item.dt_txt.split(\" \")[1] === \"12:00:00\" ||\n      item.dt_txt.split(\" \")[1] === \"15:00:00\"\n  );\n\n  const nightTemp = day.find(\n    (item) => item.dt_txt.split(\" \")[1] === \"21:00:00\"\n  );\n\n  const humidity =\n    day.map((item) => item.main.humidity).reduce((prev, curr) => prev + curr) /\n    day.length;\n\n  return (\n    <OutterContainer>\n      <InnerContainer>\n        <span>\n          <StyledImage src={Cloud} /> Morning Temperature:{\" \"}\n          <span>{displayTemperature(morningTemp)}</span>{\" \"}\n        </span>\n        <span>\n          <StyledImage src={Sun} /> Day Temperature:{\" \"}\n          <span>{displayTemperature(dayTemp)}</span>{\" \"}\n        </span>\n      </InnerContainer>\n      <InnerContainer>\n        <span>\n          <StyledImage src={Crescent} /> Night Temperature:{\" \"}\n          <span>{displayTemperature(nightTemp)}</span>{\" \"}\n        </span>\n        <span>\n          <StyledImage src={Humidity} /> Humidity:{\" \"}\n          <span>{Math.trunc(humidity)}%</span>\n        </span>\n      </InnerContainer>\n    </OutterContainer>\n  );\n};\n\nexport default Forecast;\n","const calculateAvgTempAndClouds = (days) => {\n  return days.map((item) => {\n    const tempAvg = item\n      .map((array) => array.main.temp)\n      .reduce((prev, curr) => prev + curr);\n    const cloudsAvg = item\n      .map((array) => array.clouds.all)\n      .reduce((prev, curr) => prev + curr);\n    const tempObject = {\n      averageTemp: Math.trunc(tempAvg / item.length),\n      averageClouds: Math.trunc(cloudsAvg / item.length),\n    };\n    return tempObject;\n  });\n};\n\nexport default calculateAvgTempAndClouds;\n","import styled from \"styled-components\";\n\nconst StyledSection = styled.section`\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  gap: 2rem;\n  margin: 4rem 0;\n\n  @media (max-width: 600px) {\n    gap: 1rem;\n  }\n`;\n\nexport default StyledSection;\n","import styled, { css } from \"styled-components\";\n\nconst StyledDay = styled.div`\n  width: 100px;\n  height: 200px;\n\n  background: rgba(0, 0, 0, 0.1);\n  border-radius: 30px;\n\n  ${(props) =>\n    props.isActive &&\n    css`\n      background: rgba(255, 255, 255, 0.2);\n      border: 1px solid #ffffff;\n      box-sizing: border-box;\n      border-radius: 30px;\n    `}\n\n  & p {\n    font-family: \"Palanquin\";\n    font-style: normal;\n    font-weight: normal;\n    font-size: 16px;\n\n    text-align: center;\n\n    color: #ffffff;\n    opacity: 0.5;\n\n    margin-top: 1rem;\n  }\n\n  & h4 {\n    font-family: \"Palanquin\";\n    font-style: normal;\n    font-weight: 600;\n    font-size: 28px;\n    line-height: 0;\n    text-align: center;\n\n    color: #ffffff;\n  }\n\n  @media (max-width: 600px) {\n    width: 60px;\n    height: 140px;\n\n    & p {\n      font-size: 12px;\n    }\n\n    & h4 {\n      font-size: 16px;\n    }\n  }\n\n  @media (max-width: 360px) {\n    width: 50px;\n    height: 140px;\n\n    & p {\n      font-size: 10px;\n    }\n\n    & h4 {\n      font-size: 14px;\n    }\n  }\n`;\n\nexport default StyledDay;\n","import styled from \"styled-components\";\n\nconst StyledImage = styled.img`\n  width: 80px;\n  height: 80px;\n  margin: 1rem 0.8rem;\n\n  @media (max-width: 600px) {\n    width: 40px;\n    height: 40px;\n  }\n\n  @media (max-width: 360px) {\n    width: 30px;\n    height: 30px;\n  }\n`;\n\nexport default StyledImage;\n","import { useState } from \"react\";\n\nimport calculateAvgTempAndClouds from \"../../utils/calculateAvgTempAndClouds\";\n\nimport StyledSection from \"./StyledSection\";\nimport StyledDay from \"./StyledDay\";\nimport StyledImage from \"./StyledImage\";\n\nimport Cloud from \"../../assets/cloud.svg\";\nimport Humidity from \"../../assets/humidity.svg\";\nimport Sun from \"../../assets/sun.svg\";\n\nconst DaysSelection = ({ dates, days, setDay }) => {\n  const [selectedDay, setSelectedDay] = useState(0);\n\n  if (!dates) return <></>;\n\n  let averageTempAndClouds;\n\n  if (days) {\n    averageTempAndClouds = calculateAvgTempAndClouds(days);\n  }\n\n  const weatherIcon = (averageClouds) => {\n    if (averageClouds < 50) {\n      return Sun;\n    }\n\n    if (averageClouds > 80) {\n      return Humidity;\n    }\n\n    return Cloud;\n  };\n\n  const handleSelect = (day) => {\n    setSelectedDay(day);\n    setDay(day);\n  };\n\n  return (\n    <StyledSection>\n      {dates.slice(0, 5).map((item, index) => {\n        return (\n          <StyledDay\n            key={item}\n            onClick={() => handleSelect(index)}\n            isActive={selectedDay === index}>\n            <p>{item}</p>\n            <StyledImage\n              src={weatherIcon(averageTempAndClouds[index].averageClouds)}\n            />\n            <h4>{averageTempAndClouds[index].averageTemp} Â°</h4>\n          </StyledDay>\n        );\n      })}\n    </StyledSection>\n  );\n};\n\nexport default DaysSelection;\n","const getForecast = (cityName) => {\n  return fetch(\n    `https://api.openweathermap.org/data/2.5/forecast?q=${cityName}&units=metric&appid=${process.env.REACT_APP_API_KEY}`\n  )\n    .then((response) => response.json())\n    .then((data) => data);\n};\n\nexport default getForecast;\n","import { useEffect, useState } from \"react\";\n\nimport filterDates from \"./utils/filterDates\";\nimport filterDays from \"./utils/filterDays\";\n\nimport StyledLogo from \"./components/Logo\";\nimport StyledInput from \"./components/StyledInput\";\nimport DateDisplay from \"./components/DateDisplay\";\nimport CityName from \"./components/CityName\";\nimport Forecast from \"./components/Forecast\";\nimport DaysSelection from \"./components/DaysSelection\";\n\nimport getForecast from \"./services/getForecast\";\n\nimport \"./styles/app.css\";\n\nconst App = () => {\n  const [cityName, setCityName] = useState(\"\");\n  const [forecast, setForecast] = useState(null);\n  const [day, setDay] = useState(0);\n\n  let dates = [];\n  let days = [];\n\n  if (forecast?.list) {\n    dates = filterDates(forecast);\n    days = filterDays(forecast, dates);\n  }\n\n  useEffect(() => {\n    const fetchForecast = async () => {\n      const fetchedForecast = await getForecast(cityName);\n      return setForecast(fetchedForecast);\n    };\n\n    fetchForecast();\n  }, [cityName]);\n\n  return (\n    <main>\n      <StyledLogo />\n      <StyledInput setCityName={setCityName} />\n      <DateDisplay />\n      <CityName\n        cityName={\n          forecast?.city?.name || \"Please input correct name of the city\"\n        }\n      />\n      <Forecast day={days[day]} />\n      <DaysSelection dates={dates} days={days} setDay={setDay} />\n    </main>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}