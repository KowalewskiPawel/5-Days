{"version":3,"sources":["components/Logo/Logo.jsx","components/StyledInput/StyledInput.jsx","components/DateDisplay/DateDisplay.jsx","components/CityName/CityName.jsx","assets/cloud.svg","assets/crescent.svg","assets/humidity.svg","assets/sun.svg","components/Forecast/Forecast.jsx","components/DaysSelection/DaysSelection.jsx","App.js","index.js"],"names":["Logo","styled","h1","StyledLogo","Input","input","StyledInput","setCityName","placeholder","onChange","e","target","value","StyledSection","section","StyledDate","p","showDate","date","Date","Intl","DateTimeFormat","format","split","join","DateDisplay","City","CityName","cityName","OutterContainer","div","InnerContainer","StyledImage","img","Forecast","day","morningTemp","find","item","dt_txt","dayTemp","nightTemp","humidity","map","main","reduce","prev","curr","length","src","Cloud","Math","trunc","temp","Sun","Crescent","Humidity","StyledDay","props","isActive","css","DaysSelection","averageTempAndClouds","dates","days","setDay","useState","selectedDay","setSelectedDay","tempAvg","array","cloudsAvg","clouds","all","averageTemp","averageClouds","slice","index","onClick","App","forecast","setForecast","list","i","includes","push","filter","useEffect","fetch","process","then","response","json","data","catch","err","console","error","city","name","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.85c9c0c8.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nconst Logo = styled.h1`\n  font-family: \"Pacifico\", cursive;\n  font-style: normal;\n  font-weight: normal;\n  font-size: 36px;\n  line-height: 63px;\n  text-align: center;\n  letter-spacing: 0.07px;\n  margin: 1rem 0;\n\n  color: #dfdfe1;\n`;\n\nconst StyledLogo = () => <Logo>Five Days</Logo>;\n\nexport default StyledLogo;\n","import styled from \"styled-components\";\n\nconst Input = styled.input`\n  display: block;\n  width: 317px;\n  height: 47px;\n  margin: 2rem auto 0;\n  z-index: 2;\n  background: none;\n  color: white;\n  padding: 10px;\n\n  border: 1px solid #83869c;\n  box-sizing: border-box;\n  border-radius: 16px;\n`;\n\nconst StyledInput = ({ setCityName }) => (\n  <Input\n    placeholder='Enter city name'\n    onChange={(e) => setCityName(e.target.value)}></Input>\n);\n\nexport default StyledInput;\n","import styled from \"styled-components\";\n\nconst StyledSection = styled.section`\n  width: 100%;\n  height: 39px;\n\n  margin: 2rem 0;\n\n  background: #464858;\n`;\n\nconst StyledDate = styled.p`\n  font-family: \"Palanquin\";\n  font-style: normal;\n  font-weight: normal;\n  font-size: 18px;\n  text-align: center;\n  letter-spacing: 0.07px;\n\n  color: #b1b3c5;\n`;\n\nconst showDate = () => {\n  const date = new Date();\n  return new Intl.DateTimeFormat(\"en-GB\").format(date).split(\"/\").join(\".\");\n};\n\nconst DateDisplay = () => (\n  <StyledSection>\n    <StyledDate>Today is: {showDate()}</StyledDate>\n  </StyledSection>\n);\n\nexport default DateDisplay;\n","import styled from \"styled-components\";\n\nconst City = styled.h1`\n  font-family: \"Pacifico\", cursive;\n  font-style: normal;\n  font-weight: normal;\n  font-size: 36px;\n  text-align: center;\n  letter-spacing: 0.07px;\n\n  color: #dfdfe1;\n`;\n\nconst CityName = ({ cityName }) => <City>{cityName}</City>;\n\nexport default CityName;\n","export default __webpack_public_path__ + \"static/media/cloud.736c978f.svg\";","export default __webpack_public_path__ + \"static/media/crescent.2d21af09.svg\";","export default __webpack_public_path__ + \"static/media/humidity.4d1cec5c.svg\";","export default __webpack_public_path__ + \"static/media/sun.a3cc2609.svg\";","import styled from \"styled-components\";\n\nimport Cloud from \"../../assets/cloud.svg\";\nimport Crescent from \"../../assets/crescent.svg\";\nimport Humidity from \"../../assets/humidity.svg\";\nimport Sun from \"../../assets/sun.svg\";\n\nconst OutterContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  gap: 8rem;\n  margin: 4rem 2rem;\n\n  @media (max-width: 600px) {\n    gap: 1rem;\n  }\n`;\n\nconst InnerContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  & span {\n    font-family: \"Palanquin\";\n    font-style: normal;\n    font-weight: normal;\n    font-size: 18px;\n    margin: 0.5rem;\n\n    color: #9b9ead;\n\n    & img {\n      padding-top: 1rem;\n    }\n\n    & span {\n      color: #ffff;\n    }\n  }\n\n  @media (max-width: 600px) {\n    & span {\n      font-size: 14px;\n    }\n  }\n`;\n\nconst StyledImage = styled.img`\n  width: 40px;\n  height: 40px;\n`;\n\nconst Forecast = ({ day }) => {\n  if (!day) return <></>;\n\n  const morningTemp = day.find(\n    (item) =>\n      item.dt_txt.split(\" \")[1] === \"06:00:00\" ||\n      item.dt_txt.split(\" \")[1] === \"09:00:00\"\n  );\n\n  const dayTemp = day.find(\n    (item) =>\n      item.dt_txt.split(\" \")[1] === \"12:00:00\" ||\n      item.dt_txt.split(\" \")[1] === \"15:00:00\"\n  );\n\n  const nightTemp = day.find(\n    (item) => item.dt_txt.split(\" \")[1] === \"21:00:00\"\n  );\n\n  const humidity =\n    day.map((item) => item.main.humidity).reduce((prev, curr) => prev + curr) /\n    day.length;\n\n  return (\n    <OutterContainer>\n      <InnerContainer>\n        <span>\n          <StyledImage src={Cloud} /> Morning Temperature:{\" \"}\n          <span>{Math.trunc(morningTemp.main.temp) || \"Too late\"}°</span>{\" \"}\n        </span>\n        <span>\n          <StyledImage src={Sun} /> Day Temperature:{\" \"}\n          <span>{Math.trunc(dayTemp.main.temp) || \"Too late\"}°</span>{\" \"}\n        </span>\n      </InnerContainer>\n      <InnerContainer>\n        <span>\n          <StyledImage src={Crescent} /> Night Temperature:{\" \"}\n          <span>{Math.trunc(nightTemp.main.temp) || \"Too late\"}°</span>{\" \"}\n        </span>\n        <span>\n          <StyledImage src={Humidity} /> Humidity:{\" \"}\n          <span>{Math.trunc(humidity)}%</span>\n        </span>\n      </InnerContainer>\n    </OutterContainer>\n  );\n};\n\nexport default Forecast;\n","import { useState } from \"react\";\nimport styled, { css } from \"styled-components\";\n\nimport Cloud from \"../../assets/cloud.svg\";\nimport Humidity from \"../../assets/humidity.svg\";\nimport Sun from \"../../assets/sun.svg\";\n\nconst StyledSection = styled.section`\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  gap: 2rem;\n  margin: 4rem 0;\n\n  @media (max-width: 600px) {\n    gap: 1rem;\n  }\n`;\n\nconst StyledDay = styled.div`\n  width: 100px;\n  height: 200px;\n\n  background: rgba(0, 0, 0, 0.1);\n  border-radius: 30px;\n\n  ${(props) =>\n    props.isActive &&\n    css`\n      background: rgba(255, 255, 255, 0.2);\n      border: 1px solid #ffffff;\n      box-sizing: border-box;\n      border-radius: 30px;\n    `}\n\n  & p {\n    font-family: \"Palanquin\";\n    font-style: normal;\n    font-weight: normal;\n    font-size: 16px;\n\n    text-align: center;\n\n    color: #ffffff;\n    opacity: 0.5;\n\n    margin-top: 1rem;\n  }\n\n  & h4 {\n    font-family: \"Palanquin\";\n    font-style: normal;\n    font-weight: 600;\n    font-size: 28px;\n    line-height: 0;\n    text-align: center;\n\n    color: #ffffff;\n  }\n\n  @media (max-width: 600px) {\n    width: 60px;\n    height: 140px;\n\n    & p {\n      font-size: 12px;\n    }\n\n    & h4 {\n      font-size: 16px;\n    }\n  }\n\n  @media (max-width: 360px) {\n    width: 50px;\n    height: 140px;\n\n    & p {\n      font-size: 10px;\n    }\n\n    & h4 {\n      font-size: 14px;\n    }\n  }\n`;\n\nconst StyledImage = styled.img`\n  width: 80px;\n  height: 80px;\n  margin: 1rem 0.8rem;\n\n  @media (max-width: 600px) {\n    width: 40px;\n    height: 40px;\n  }\n\n  @media (max-width: 360px) {\n    width: 30px;\n    height: 30px;\n  }\n`;\n\nconst DaysSelection = ({ dates, days, setDay }) => {\n  const [selectedDay, setSelectedDay] = useState(0);\n\n  if (!dates) return <></>;\n\n  let averageTempAndClouds;\n\n  if (days) {\n    averageTempAndClouds = days.map((item) => {\n      const tempAvg = item\n        .map((array) => array.main.temp)\n        .reduce((prev, curr) => prev + curr);\n      const cloudsAvg = item\n        .map((array) => array.clouds.all)\n        .reduce((prev, curr) => prev + curr);\n      const tempObject = {\n        averageTemp: Math.trunc(tempAvg / item.length),\n        averageClouds: Math.trunc(cloudsAvg / item.length),\n      };\n      return tempObject;\n    });\n  }\n\n  const weatherIcon = (averageClouds) => {\n    if (averageClouds < 50) {\n      return Sun;\n    }\n\n    if (averageClouds > 80) {\n      return Humidity;\n    }\n\n    return Cloud;\n  };\n\n  const handleSelect = (day) => {\n    setSelectedDay(day);\n    setDay(day);\n  };\n\n  return (\n    <StyledSection>\n      {dates.slice(0, 5).map((item, index) => {\n        return (\n          <StyledDay\n            key={item}\n            onClick={() => handleSelect(index)}\n            isActive={selectedDay === index}>\n            <p>{item}</p>\n            <StyledImage\n              src={weatherIcon(averageTempAndClouds[index].averageClouds)}\n            />\n            <h4>{averageTempAndClouds[index].averageTemp} °</h4>\n          </StyledDay>\n        );\n      })}\n    </StyledSection>\n  );\n};\n\nexport default DaysSelection;\n","import { useEffect, useState } from \"react\";\n\nimport StyledLogo from \"./components/Logo/Logo\";\nimport StyledInput from \"./components/StyledInput/StyledInput\";\nimport DateDisplay from \"./components/DateDisplay/DateDisplay\";\nimport CityName from \"./components/CityName/CityName\";\nimport Forecast from \"./components/Forecast/Forecast\";\nimport DaysSelection from \"./components/DaysSelection/DaysSelection\";\n\nimport \"./styles/app.css\";\n\nconst App = () => {\n  const [cityName, setCityName] = useState(\"\");\n  const [forecast, setForecast] = useState(null);\n  const [day, setDay] = useState(0);\n\n  const dates = [];\n  const days = [];\n\n  if (forecast?.list) {\n    for (let i = 0; i < forecast.list.length; i++) {\n      if (dates.includes(forecast.list[i].dt_txt.split(\" \")[0])) continue;\n      dates.push(forecast.list[i].dt_txt.split(\" \")[0]);\n    }\n\n    for (let i = 0; i < 5; i++) {\n      days.push(\n        forecast.list.filter((item) => item.dt_txt.split(\" \")[0] === dates[i])\n      );\n    }\n  }\n\n  useEffect(() => {\n    fetch(\n      `https://api.openweathermap.org/data/2.5/forecast?q=${cityName}&units=metric&appid=${process.env.REACT_APP_API_KEY}`\n    )\n      .then((response) => response.json())\n      .then((data) => setForecast(data))\n      .catch((err) => console.error(err));\n  }, [cityName]);\n\n  return (\n    <main>\n      <StyledLogo />\n      <StyledInput setCityName={setCityName} />\n      <DateDisplay />\n      <CityName\n        cityName={\n          forecast?.city?.name || \"Please input correct name of the city\"\n        }\n      />\n      <Forecast day={days[day]} />\n      <DaysSelection dates={dates} days={days} setDay={setDay} />\n    </main>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}